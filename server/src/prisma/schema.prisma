datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["public", "inventory-copilot"]
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

model Product {
  id             Int       @id @default(autoincrement())
  userId         String?
  user           User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  sku            String    @unique // SKU field marked as unique
  brand          String
  productName    String
  description    String
  inStock        Int
  reorderAt      Int
  orderQty       Int
  shipper        String
  unitPrice      Float?
  itemUsageSpeed String?
  deletedAt      DateTime?
  orders         Order[] // Relation to Order model

  @@schema("public")
}

model Order {
  id               Int       @id @default(autoincrement())
  SKU              String // Field to connect with Product's SKU
  product          Product   @relation(fields: [SKU], references: [sku], onDelete: Cascade) // Relation using SKU
  orderedDate      DateTime  @default(now())
  schedArrivalDate DateTime?
  delivered        DateTime?
  orderQty         Int
  orderStatus      String    @default("active")
  totalCost        Float
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  @@schema("public")
}

model User {
  id              String            @id @default(cuid())
  username        String            @unique
  password        String
  isTempAccount   Boolean           @default(false)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  tokens          Token[]
  products        Product[]
  dashboard       Dashboard[]
  dashboardWidget DashboardWidget[]
  customWidget    CustomWidget[]

  @@schema("public")
}

model Token {
  id        Int      @id @default(autoincrement())
  token     String
  type      String // "ACCESS" or "REFRESH"
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@schema("public")
}

// -------------------------------------------------------

model Dashboard {
  id        Int      @id @default(autoincrement())
  name      String
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  userId  String
  user    User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  widgets DashboardWidget[]

  @@schema("inventory-copilot")
}

model DashboardWidget {
  id            Int    @id @default(autoincrement())
  name          String
  entity        String // inventory, finance, tasks, finance, or any module
  criteria      String // like late tasks, in transit cars, late issues, pending tasks, on estimates and etc.
  displayType   String // count, total 
  icon          String
  color         String
  navigationUrl String

  i String // this is the key for react-grid-layout
  x Int // kept these as separate columns because react-grid-layout takes these from the widget object directly
  y Float
  w Float
  h Float

  userId      String
  dashboardId Int

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  dashboard Dashboard @relation(fields: [dashboardId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@schema("inventory-copilot")
}

// CustomWidget is for the user's custom widget options in dashboard editor sidebar, not for widgets on dashboard
model CustomWidget {
  id          Int    @id @default(autoincrement())
  name        String
  entity      String // inventory, finance, tasks, finance, or any module
  criteria    String // like late tasks, in transit cars, late issues, pending tasks, on estimates and etc.
  displayType String // is it a count or total
  icon        String
  color       String

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@schema("inventory-copilot")
}
